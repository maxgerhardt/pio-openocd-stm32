# script for stm32h7x family

#
# stm32h7 devices support both JTAG and SWD transports.
#

# Configuration variables (default values) :
#   CHIPNAME            (stm32h7x)
#   WORKAREASIZE        (0x10000)
#   CPUTAPID            (jtag ? 0x6ba00477 : 0x6ba02477)
#   DUAL_BANK           (0)
#   DUAL_CORE           (0)
#     DBG_CM7           (1)
#     DBG_CM4           (DUAL_CORE ? 1 : 0)
#   USE_CTI             (0)
#     CM7_CAN_HALT      (USE_CTI && CM7 ? 1 : 0)
#     CM7_CAN_BE_HALTED (USE_CTI && CM7 ? 1 : 0)
#     CM4_CAN_HALT      (USE_CTI && CM4 ? 1 : 0)
#     CM4_CAN_BE_HALTED (USE_CTI && CM4 ? 1 : 0)
#   CORE_RESET          (1)
#   CONNECT_UNDER_RESET (0)
#   ENABLE_LOW_POWER    (0)
#   STOP_WATCHDOG       (0)
#   CLOCK_FREQ          (4000)
#   AP_NUM              .

# Error cases:
# using_hla
# DUAL_CORE=0 and (USE_CTI=0 or CM4=1)
# DBG_CM7=0 and DBG_CM4=0
# USE_CTI=0 and (CMx_CAN_HALT=1 or CMx_CAN_BE_HALTED=1)
# DBG_CM7=0 and (CM7_CAN_HALT=1 or CM7_CAN_BE_HALTED=1)
# DBG_CM4=0 and (CM4_CAN_HALT=1 or CM4_CAN_BE_HALTED=1)

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]
source [find gdb_helper.tcl]

set _CHIPNAME stm32h7x
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
}
set $_CHIPNAME.DUAL_BANK 0
set $_CHIPNAME.DUAL_CORE 0
set $_CHIPNAME.USE_CTI 0

if { [info exists BOARDNAME] } {
   set _BOARDNAME $BOARDNAME
} else {
   set _BOARDNAME stm32h7x_board
}

if { [info exists DUAL_BANK] } {
	set $_CHIPNAME.DUAL_BANK $DUAL_BANK
}

if { [info exists DUAL_CORE] } {
	set $_CHIPNAME.DUAL_CORE $DUAL_CORE
}

# Issue an error when hla is used to reduce complexity
if { [set $_CHIPNAME.DUAL_CORE] && [using_hla] } {
	echo "Error : hla does not support multicore debugging"
	shutdown
}

set $_CHIPNAME.DBG_CM7 1
set $_CHIPNAME.DBG_CM4 [set $_CHIPNAME.DUAL_CORE]

if { [info exists AP_NUM] } {
	if { $AP_NUM == 0 } {
		set $_CHIPNAME.DBG_CM7 1
		set $_CHIPNAME.DBG_CM4 0
	}
	if { $AP_NUM == 3 } {
		set $_CHIPNAME.DBG_CM7 0
		set $_CHIPNAME.DBG_CM4 1
	}
}

# Issue an error when DUAL_CORE=0 and DBG_CM4=1
if { ![set $_CHIPNAME.DUAL_CORE] && [set $_CHIPNAME.DBG_CM4] } {
	echo "Error : single core device does not have a Cortex-M4"
	shutdown
}

# Issue an error when DBG_CM4=0 and DBG_CM7=0
if { ![set $_CHIPNAME.DBG_CM4] && ![set $_CHIPNAME.DBG_CM7] } {
	echo "Error: select one core at least"
	shutdown
}

if { [info exists USE_CTI] } {
	set $_CHIPNAME.USE_CTI $USE_CTI
}

# Issue an error when DUAL_CORE=0 and USE_CTI=1
if { ![set $_CHIPNAME.DUAL_CORE] && [set $_CHIPNAME.USE_CTI] } {
	echo "Error : could not use CTI with a single core device"
	shutdown
}

set $_CHIPNAME.CM7_CAN_HALT 0
set $_CHIPNAME.CM7_CAN_BE_HALTED 0
set $_CHIPNAME.CM4_CAN_HALT 0
set $_CHIPNAME.CM4_CAN_BE_HALTED 0

if { [info exists AP_0_CAN_HALT] } {
	set $_CHIPNAME.CM7_CAN_HALT $AP_0_CAN_HALT
}

if { [info exists AP_0_CAN_BE_HALTED] } {
	set $_CHIPNAME.CM7_CAN_BE_HALTED $AP_0_CAN_BE_HALTED
}

if { [info exists AP_3_CAN_HALT] } {
	set $_CHIPNAME.CM4_CAN_HALT $AP_3_CAN_HALT
}

if { [info exists AP_3_CAN_BE_HALTED] } {
	set $_CHIPNAME.CM4_CAN_BE_HALTED $AP_3_CAN_BE_HALTED
}

if { ![set $_CHIPNAME.USE_CTI] && [expr {[set $_CHIPNAME.CM7_CAN_HALT] || [set $_CHIPNAME.CM7_CAN_BE_HALTED] \
	|| [set $_CHIPNAME.CM4_CAN_HALT] || [set $_CHIPNAME.CM4_CAN_BE_HALTED]}] } {
	echo "Error: CTI configuration issue (CTI is disabled)"
	shutdown
}

if { ![set $_CHIPNAME.DBG_CM7] && [expr {[set $_CHIPNAME.CM7_CAN_HALT] || [set $_CHIPNAME.CM7_CAN_BE_HALTED]}] } {
	echo "Error: CTI configuration issue (CM7 is disabled)"
	shutdown
}

if { ![set $_CHIPNAME.DBG_CM4] && [expr {[set $_CHIPNAME.CM4_CAN_HALT] || [set $_CHIPNAME.CM4_CAN_BE_HALTED]}] } {
	echo "Error: CTI configuration issue (CM4 is disabled)"
	shutdown
}

if { [info exists CORE_RESET] } {
	set _CORE_RESET $CORE_RESET
} else {
	set _CORE_RESET 1
}

if { [info exists CONNECT_UNDER_RESET] } {
	set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
	set _CONNECT_UNDER_RESET 0
}

if { [info exists ENABLE_LOW_POWER] } {
	set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
	set _ENABLE_LOW_POWER 0
}

if { [info exists STOP_WATCHDOG] } {
	set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
	set _STOP_WATCHDOG 0
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x10000
}

# jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		set _CPUTAPID 0x6ba00477
	} else {
		set _CPUTAPID 0x6ba02477
	}
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if { ![using_hla] } {
	# STM32H7 provides an APB-AP at access port 2, which allows the access to
	# the debug and trace features on the system APB System Debug Bus (APB-D).
	if { $AP_NUM == 1 } {
		target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 0
		swo  create $_CHIPNAME.swo  -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE00E3000
		tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE00F5000
	} else {
		target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2
		swo  create $_CHIPNAME.swo  -dap $_CHIPNAME.dap -ap-num 2 -baseaddr 0xE00E3000
		tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 2 -baseaddr 0xE00F5000
	}
}

# Assigned gdb port to be used during target creation
if { [info exists AP_NUM] && [info exists GDB_PORT] } {
	if { ($AP_NUM == 0) || ($AP_NUM == 1) } {
		set _GDB_PORT_CM7 $GDB_PORT
		set _GDB_PORT_CM4 [expr {$GDB_PORT + 1}]
	} else {
		set _GDB_PORT_CM7 [expr {$GDB_PORT + 1}]
		set _GDB_PORT_CM4 $GDB_PORT
	}
}

# APNum definition
if { $AP_NUM == 1 } {
	set _AP_NUM_CM7 1
} else {
	set _AP_NUM_CM7 0
}
set _AP_NUM_CM4 3

if { [set $_CHIPNAME.DBG_CM7] } {
	if { [info exists _GDB_PORT_CM7] } {
		target create $_CHIPNAME.cm7 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM7 -gdb-port $_GDB_PORT_CM7 -gdb-max-connections 2
	} else {
		target create $_CHIPNAME.cm7 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM7 -gdb-max-connections 2
	}

	if { ![using_hla] } {
		if { $_CORE_RESET == 1 } {
			$_CHIPNAME.cm7 cortex_m reset_config vectreset
		} else {
			$_CHIPNAME.cm7 cortex_m reset_config sysresetreq
		}

		# create CTI to be able to stop a CTI previously started on board. Even if we do not use CTI.
		cti create $_CHIPNAME.cm7_cti -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM7 -baseaddr 0xE0043000
	}

	if { [set $_CHIPNAME.DUAL_CORE] } {
		# avoid reseting the target in dual core mode
		$_CHIPNAME.cm7 configure -event gdb-flash-erase-start "soft_reset_halt"
		$_CHIPNAME.cm7 configure -event gdb-flash-write-end "soft_reset_halt"
	}

	$_CHIPNAME.cm7 configure -work-area-phys 0x24000000 -work-area-size $_WORKAREASIZE -work-area-backup 1

	flash bank $_CHIPNAME.bank1.cm7 stm32h7x 0x08000000 0 0 0 $_CHIPNAME.cm7

	if { [set $_CHIPNAME.DUAL_BANK] } {
		flash bank $_CHIPNAME.bank2.cm7 stm32h7x 0x08100000 0 0 0 $_CHIPNAME.cm7
	}

	if { [info exists FLASH_LOADERS] } {
		foreach FLASH_LOADER $FLASH_LOADERS {
			flash bank $FLASH_LOADER stldr 0 0 0 0 [target current] $FLASH_LOADER
		}
	}

	$_CHIPNAME.cm7 configure -event examine-end {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { ![using_hla] } {
			# Disable corresponding CTI by default
			stm32h7x_cti_stop_one cm7_cti

			stm32h7x_dbgmcu_init
		}

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_start_cm7_cti
		}
	}

	$_CHIPNAME.cm7 configure -event reset-init {
		global _CLOCK_FREQ

		adapter speed $_CLOCK_FREQ
	}

	$_CHIPNAME.cm7 configure -event reset-end {
		global FLASH_LOADERS
		global NAME_INITIALIZED_LOADER
		global INDEX_INITIALIZED_LOADER

		if { [info exists INDEX_INITIALIZED_LOADER] } {
			set NAME_INITIALIZED_LOADER [lindex $FLASH_LOADERS $INDEX_INITIALIZED_LOADER]
			set flash_list [flash list]
			for {set i 0} {$i < [llength $flash_list]} {incr i} {
				if { [lindex [lindex $flash_list  $i] 1] == $NAME_INITIALIZED_LOADER } {
					set INIT_BANK_ID $i
					break
				}
			}
			if { ![info exists INIT_BANK_ID] } {
				echo "ERROR: can't find bank_id for stldr init"
			} else {
				stldr init $INIT_BANK_ID
			}
		}

		if { [using_hla] } {
			stm32h7x_dbgmcu_init
		}
	}

	$_CHIPNAME.cm7 configure -event resume-start {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm7_cti
		}
	}

	$_CHIPNAME.cm7 configure -event halted {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm7_cti
		}
	}

	proc first_gdb_attach_hook {} {
		global _CHIPNAME
		global $_CHIPNAME.DUAL_CORE
		global _CONNECT_UNDER_RESET

		# Needed to be able to use the connect_assert_srst in reset_config
		if { $_CONNECT_UNDER_RESET == 1 } {
			reset init
		} else {
			if { [set $_CHIPNAME.DUAL_CORE] } {
				soft_reset_halt
			}
		}
	}

	proc last_gdb_detach_hook {} {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_stop_one cm7_cti
		}

		# Disable CM7 slave port in SWO trace Funnel
		# Hack, use stm32h7x_dbgmcu_mmw with big offset to control SWTF
		# SWTF_CTRL |= ~ENS0
		stm32h7x_dbgmcu_mmw 0x3000 0 0x00000001

		# to close connection if debug mode entered
		if { [info exists AP_NUM] && (($AP_NUM == 0) || ($AP_NUM == 1)) } {
			shutdown
		}
	}

	$_CHIPNAME.cm7 configure -event gdb-attach { gdb_attach_hook }
	$_CHIPNAME.cm7 configure -event gdb-detach { gdb_detach_hook }
}

if { [set $_CHIPNAME.DBG_CM4] } {
	if { [info exists _GDB_PORT_CM4] } {
		target create $_CHIPNAME.cm4 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM4 -gdb-port $_GDB_PORT_CM4 -gdb-max-connections 2
	} else {
		target create $_CHIPNAME.cm4 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM4 -gdb-max-connections 2
	}

	if { ![using_hla] } {
		if { $_CORE_RESET == 1 } {
			$_CHIPNAME.cm4 cortex_m reset_config vectreset
		} else {
			$_CHIPNAME.cm4 cortex_m reset_config sysresetreq
		}
	}

	# create CTI to be able to stop a CTI previously started on board. Even if we do not use CTI.
	cti create $_CHIPNAME.cm4_cti -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM4 -baseaddr 0xE0043000

	$_CHIPNAME.cm4 configure -work-area-phys 0x38000000 -work-area-size $_WORKAREASIZE -work-area-backup 1

	# avoid reseting the target in dual core mode
	$_CHIPNAME.cm4 configure -event gdb-flash-erase-start "soft_reset_halt"
	$_CHIPNAME.cm4 configure -event gdb-flash-write-end "soft_reset_halt"

	if { [regexp -nocase {STM32H745.G..} $_CHIPNAME] || [regexp -nocase {STM32H747.G..} $_CHIPNAME] } {
		flash bank $_CHIPNAME.bank1.cm4 stm32h7x 0x08000000 0x80000 0 0 $_CHIPNAME.cm4

		if { [set $_CHIPNAME.DUAL_BANK] } {
			flash bank $_CHIPNAME.bank2.cm4 stm32h7x 0x08100000 0x80000 0 0 $_CHIPNAME.cm4
		}
	} else {
		flash bank $_CHIPNAME.bank1.cm4 stm32h7x 0x08000000 0 0 0 $_CHIPNAME.cm4

		if { [set $_CHIPNAME.DUAL_BANK] } {
			flash bank $_CHIPNAME.bank2.cm4 stm32h7x 0x08100000 0 0 0 $_CHIPNAME.cm4
		}
	}
	if { $AP_NUM == 0 } {
		# Make sure that cm7 is selected
		targets $_CHIPNAME.cm7
	}

	$_CHIPNAME.cm4 configure -event examine-end {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		# Disable corresponding CTI
		stm32h7x_cti_stop_one cm4_cti

		stm32h7x_dbgmcu_init

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_start_cm4_cti
		}
	}

	$_CHIPNAME.cm4 configure -event reset-init {
		global _CLOCK_FREQ

		# Clock after reset is HSI at 64 MHz, no need of PLL
		adapter speed $_CLOCK_FREQ
	}

	$_CHIPNAME.cm4 configure -event resume-start {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm4_cti
		}
	}

	$_CHIPNAME.cm4 configure -event halted {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm4_cti
		}
	}

	proc first_gdb_attach_hook {} {
		global _CONNECT_UNDER_RESET

		# Needed to be able to use the connect_assert_srst in reset_config
		if { $_CONNECT_UNDER_RESET == 1 } {
			reset init
		} else {
			soft_reset_halt
		}
	}

	proc last_gdb_detach_hook {} {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_stop_one cm4_cti
		}

		# Disable CM4 slave port in SWO trace Funnel
		# Hack, use stm32h7x_dbgmcu_mmw with big offset to control SWTF
		# SWTF_CTRL |= ~ENS1
		stm32h7x_dbgmcu_mmw 0x3000 0 0x00000002

		# to close connection if debug mode entered
		if { [info exists AP_NUM] && ($AP_NUM == 3) } {
			shutdown
		}
	}

	$_CHIPNAME.cm4 configure -event gdb-attach { gdb_attach_hook }
	$_CHIPNAME.cm4 configure -event gdb-detach { gdb_detach_hook }
}

adapter srst delay 100
if { [using_jtag] } {
	jtag_ntrst_delay 100
}

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}
adapter speed $_CLOCK_FREQ

# The STM32H7 does not support connect_assert_srst mode because the AXI is
# unavailable while SRST is asserted, and that is used to access the DBGMCU
# component at 0x5C001000 in the examine-end event handler.
#
# It is possible to access the DBGMCU component at 0xE00E1000 via AP2 instead
# of the default AP0, and that works with SRST asserted; however, nonzero AP
# usage does not work with HLA, so is not done by default. That change could be
# made in a local configuration file if connect_assert_srst mode is needed for
# a specific application and a non-HLA adapter is in use.

if { ![using_hla] } {
	# Set CSW[27], which according to ARM ADI v5 appendix E1.4 maps to AHB signal
	# HPROT[3], which according to AMBA AHB/ASB/APB specification chapter 3.7.3
	# makes the data access cacheable. This allows reading and writing data in the
	# CPU cache from the debugger, which is far more useful than going straight to
	# RAM when operating on typical variables, and is generally no worse when
	# operating on special memory locations.
	$_CHIPNAME.dap apcsw 0x08000000 0x08000000
}

# like mrw, but with target selection
proc stm32h7x_mrw {used_target reg} {
	return [$used_target read_memory $reg 32 1]
}

# like mmw, but with target selection
proc stm32h7x_mmw {used_target reg setbits clearbits} {
	set old [stm32h7x_mrw $used_target $reg]
	set new [expr {($old & ~$clearbits) | $setbits}]
	$used_target mww $reg $new
}

# mmw for dbgmcu component registers, it accepts the register offset from dbgmcu base
# this procedure will use the mem_ap on AP2 whenever possible
proc stm32h7x_dbgmcu_mmw {reg_offset setbits clearbits} {
	global _CHIPNAME

	# use $_CHIPNAME.ap2 if possible, and use the proper dbgmcu base address
	if { ![using_hla] } {
		set used_target $_CHIPNAME.ap2
		set reg_addr [expr {0xE00E1000 + $reg_offset}]
	} {
		set used_target [target current]
		set reg_addr [expr {0x5C001000 + $reg_offset}]
	}

	stm32h7x_mmw $used_target $reg_addr $setbits $clearbits
}

proc stm32h7x_dbgmcu_init {} {
	global _ENABLE_LOW_POWER
	global _STOP_WATCHDOG

	# Enable D3 and D1 DBG clocks
	# DBGMCU_CR |= D3DBGCKEN | D1DBGCKEN
	stm32h7x_dbgmcu_mmw 0x004 0x00600000 0

	if { $_ENABLE_LOW_POWER == 1 } {
		# Enable debug during low power modes (uses more power)
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP in D1 Domain
		stm32h7x_dbgmcu_mmw 0x004 0x00000007 0
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP in D2 Domain
		stm32h7x_dbgmcu_mmw 0x004 0x00000038 0
	} else {
		# Disable debug during low power modes
		# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP | DBG_SLEEP)
		stm32h7x_dbgmcu_mmw 0x004 0 0x0000003F
	}
	if { $_STOP_WATCHDOG == 1 } {
		# Stop watchdog counters during halt
		# DBGMCU_APB3FZ1 |= WWDG1
		stm32h7x_dbgmcu_mmw 0x034 0x00000040 0
		# DBGMCU_APB1LFZ1 |= WWDG2
		stm32h7x_dbgmcu_mmw 0x03C 0x00000800 0
		# DBGMCU_APB4FZ1 |= WDGLSD1 | WDGLSD2
		stm32h7x_dbgmcu_mmw 0x054 0x000C0000 0
	} else {
		# Don't Stop watchdog counters during halt
		# DBGMCU_APB3FZ1 |= ~WWDG1
		stm32h7x_dbgmcu_mmw 0x034 0 0x00000040
		# DBGMCU_APB1LFZ1 |= ~WWDG2
		stm32h7x_dbgmcu_mmw 0x03C 0 0x00000800
		# DBGMCU_APB4FZ1 |= ~(WDGLSD1 | WDGLSD2)
		stm32h7x_dbgmcu_mmw 0x054 0 0x000C0000
	}
	if { ($_ENABLE_LOW_POWER == 0) && ($_STOP_WATCHDOG == 0) } {
		# Disable D3 and D1 DBG clocks
		# DBGMCU_CR |= ~(DBG_CKEN_D3 | DBG_CKEN_D1)
		stm32h7x_dbgmcu_mmw 0x004 0 0x00600000
	}

	# Enable clock for tracing
	# TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins assignment
	# DBGMCU_CR |= TRACECLKEN
	stm32h7x_dbgmcu_mmw 0x004 0x00100000 0
}

# CM7_CTI TRIGIN0 (HALTED) and CM4_CTI TRIGOUT0 (EDBGRQ) at CTM_CHANNEL_0
# CM7_CTI TRIGOUT0 (EDBGRQ) and CM4_CTI TRIGIN0 (HALTED) at CTM_CHANNEL_2
proc stm32h7x_cti_config_one {cti on_off can_halt can_be_halted} {
	global _CHIPNAME

	stm32h7x_cti_prepare_restart_one $cti
	$_CHIPNAME.$cti write INEN0 $can_halt
	$_CHIPNAME.$cti write OUTEN0 $can_be_halted
	$_CHIPNAME.$cti enable $on_off
}

proc stm32h7x_cti_start_cm7_cti {} {
	global _CHIPNAME
	global $_CHIPNAME.CM7_CAN_HALT
	global $_CHIPNAME.CM7_CAN_BE_HALTED

	set can_halt [expr {[set $_CHIPNAME.CM7_CAN_HALT] ? 0x1 : 0}]
	set can_be_halted [expr {[set $_CHIPNAME.CM7_CAN_BE_HALTED] ? 0x4 : 0}]

	stm32h7x_cti_config_one cm7_cti on $can_halt $can_be_halted
}

proc stm32h7x_cti_start_cm4_cti {} {
	global _CHIPNAME
	global $_CHIPNAME.CM4_CAN_HALT
	global $_CHIPNAME.CM4_CAN_BE_HALTED

	set can_halt [expr {[set $_CHIPNAME.CM4_CAN_HALT] ? 0x4 : 0}]
	set can_be_halted [expr {[set $_CHIPNAME.CM4_CAN_BE_HALTED] ? 0x1 : 0}]

	stm32h7x_cti_config_one cm4_cti on $can_halt $can_be_halted
}

proc stm32h7x_cti_stop_one {cti} {
	stm32h7x_cti_config_one $cti off 0 0
}

proc stm32h7x_cti_prepare_restart_one {cti} {
	global _CHIPNAME

	# Acknowlodge EDBGRQ at TRIGOUT0
	$_CHIPNAME.$cti write INACK 0x01
	$_CHIPNAME.$cti write INACK 0x00
}
